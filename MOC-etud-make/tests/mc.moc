// assembleur inline en dehors d'une fonction
asm {
   CALL (LB) _main   ; appel au point d'entree du programme
   HALT              ; arret de la machine
   }

// Assembleur inline dans une fonction. 
 int * malloc(int taille){
 asm {
   LOAD %taille    ; acces au parametre taille
   SUBR Malloc        ; allocation
   RETURN (1) 1       
   }
 }

// Assembleur inline dans une fonction
void log(char *message, int valeur){
  int x = 12;
  asm {
    LOAD %message        ; acces au premier parametre
    SUBR Sout            ; afficher message
    LOAD %valeur         ; acces au deuxieme parametre
    LOADL 1
    SUBR IAdd
    STORE %x             ; ecrire valeur + 1 dans x
    LOAD %x              ; acces a la variable x
    SUBR IOUT            ; afficher x
    SUBR LN 
    RETURN (2) 0
    }
}
 
// fonction illustrant la manipulation de pointeurs.
int foo(int n){
    // declaration sans initialisation
    int xxx;
    xxx = 100;
    // declaration avec initialisation
    int a = n+999;
    // declaration d'un pointeur
    int *m = malloc(1);
    a = *m +666;
    // declaration d'un pointeur sur pointeur
    int ** k = malloc(2) ;
    *k = m;
    ** k = 12;
    int b = **k + 9999;
    // cast
    m = (int *)malloc(10);
    return m;
}
   
// fonction renvoyant un pointeur
int * ref(int x){
  int *p = malloc(x);
  return p;
  }

// fonction illustrant les expressions arithmethiques
int bar(int a, int b){
   int u = 301;
   int v = 401;
   int result;
   result = foo(33*a - b > (-55*u/22%11/v));
   return result;
} 

// point d'entree du programme.
int main(){
//    log("Hello, world ! ", bar(98,99));
    char c = 'a';
    int y = 999;
    // instruction conditionnelle
    if (y ==0){
 //      log("alors",y);}
    }
    else {
//       log("sinon", y);
    }
    return y;
}
